CREATE OR REPLACE VIEW CDS.CROSS_PRODUCT.VW_SAMDA_SOD_POSITION_FOF AS
WITH CTE AS (
    SELECT 
        'DUMMY_TICKER' AS TICKER,
        'DUMMY_CUSIP' AS CUSIP,
        'DUMMY_STRATEGY_SOURCE' AS STRATEGY_SOURCE,
        CURRENT_DATE AS ASOF_DATE,
        100 AS SHARE_QUANTITY,
        1000 AS SHARES_OUTSTANDING,
        10000.00 AS MARKET_VALUE
)
SELECT * FROM CTE;



import com.fasterxml.jackson.databind.ObjectMapper;

import java.util.Map;

public class JsonToMapExample {
    public static void main(String[] args) {
        // The JSON string (replace this with the actual string from your input)
        String jsonString = "{\"operationType\":\"Insert\",\"eventPublishedTimestamp\":\"2025-01-31-18:30:15.171825\",\"chit\":\"000026168218029705667\",\"traceId\":\"070993211\",\"failureMessage\":\"Account member issuer BU number not found\"}";

        // Convert the JSON string to a Map
        ObjectMapper objectMapper = new ObjectMapper();
        try {
            Map<String, String> resultMap = objectMapper.readValue(jsonString, Map.class);

            // Print the map to verify
            resultMap.forEach((key, value) -> System.out.println(key + " : " + value));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}


<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!-- 
      1) Console appender for local usage 
      2) GCP Logging appender for production (will also work locally if you have
         credentials, but typically it just logs to console if you’re not in GCP).
    -->

    <!-- Optional: include Spring’s default base config if you want standard logging patterns -->
    <include resource="org/springframework/boot/logging/logback/base.xml" />

    <!-- 1) Console Appender -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!-- Simple pattern for local dev -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- 2) Google Cloud Logging Appender -->
    <appender name="GCP" class="com.google.cloud.logging.logback.LoggingAppender">
        <!-- The log name is how it will appear in Cloud Logging -->
        <log>my-application-log</log>
        
        <!-- 
          resourceType can be “global”, or a more specific type like “gae_app” 
          or “gce_instance”, etc., if you’re on App Engine or GCE. 
          For generic usage, “global” is fine.
        -->
        <resourceType>global</resourceType>
        
        <!-- By default, the LoggingAppender uses JSON-style structured logs in GCP. -->
    </appender>

    <!-- Set the log level to INFO for all logs -->
    <root level="INFO">
        <!-- Attach both the console and the Google Cloud appenders -->
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="GCP"/>
    </root>
</configuration>
